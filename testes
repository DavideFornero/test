import tkinter as tk
import tkinter.ttk as ttk
import tkinter.messagebox as msgbox
import json
import os
import calendar
from datetime import datetime


class RegistroApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Tela de Cadastro")

        self.frame_usuarios = tk.Frame(self.root)
        self.frame_usuarios.pack(fill=tk.X, padx=10, pady=5)

        self.lb_selecione_usuario = tk.Label(self.frame_usuarios, text="Selecione o usuário:")
        self.lb_selecione_usuario.pack(side=tk.LEFT)

        self.cb_usuarios = tk.StringVar()
        self.combo_usuarios = tk.ttk.Combobox(self.frame_usuarios, textvariable=self.cb_usuarios)
        self.combo_usuarios.pack(side=tk.RIGHT)
        self.combo_usuarios.bind("<<ComboboxSelected>>", self.selecionar_usuario)

        self.frame_cadastro = tk.LabelFrame(self.root, text="Criar novo cadastro")
        self.frame_cadastro.pack(fill=tk.X, padx=10, pady=5)

        self.frame_nome = tk.Frame(self.frame_cadastro)
        self.frame_nome.pack(fill=tk.X, padx=10, pady=5)

        self.lb_nome = tk.Label(self.frame_nome, text="Nome:")
        self.lb_nome.pack(side=tk.LEFT)

        self.entry_nome = tk.Entry(self.frame_nome)
        self.entry_nome.pack(side=tk.RIGHT, expand=True, fill=tk.X)

        self.bolsas = [
            "Bolsa do Brasil",
            "Bolsa Italiana",
            "Bolsa Euronext",
            "Deutsche Börse",
            "London Stock Exchange"
        ]

        self.variaveis_bolsas = {}

        for bolsa in self.bolsas:
            frame_bolsa = tk.LabelFrame(self.frame_cadastro, text=bolsa)
            frame_bolsa.pack(fill=tk.X, padx=10, pady=5)

            self.variaveis_bolsas[bolsa] = {
                "Day Trade": tk.DoubleVar(),
                "Swing Trade": tk.DoubleVar(),
                "Outros impostos": tk.DoubleVar()
            }

            for operacao, variavel in self.variaveis_bolsas[bolsa].items():
                frame_operacao = tk.Frame(frame_bolsa)
                frame_operacao.pack(fill=tk.X, padx=10, pady=5)

                lb_operacao = tk.Label(frame_operacao, text=operacao + ":")
                lb_operacao.pack(side=tk.LEFT)

                entry_operacao = tk.Entry(frame_operacao, textvariable=variavel)
                entry_operacao.pack(side=tk.RIGHT, expand=True, fill=tk.X)

        self.frame_deducoes = tk.Frame(self.frame_cadastro)
        self.frame_deducoes.pack(fill=tk.X, padx=10, pady=5)

        self.lb_deducoes = tk.Label(self.frame_deducoes, text="Deduções: Valor")
        self self.lb_deducoes.pack(side=tk.LEFT)

        self.entry_deducoes = tk.Entry(self.frame_deducoes)
        self.entry_deducoes.pack(side=tk.RIGHT, expand=True, fill=tk.X)

        self.frame_botoes = tk.Frame(self.frame_cadastro)
        self.frame_botoes.pack(fill=tk.X, padx=10, pady=5)

        self.bt_cadastrar = tk.Button(self.frame_botoes, text="Cadastrar", command=self.cadastrar_usuario)
        self.bt_cadastrar.pack(side=tk.LEFT)

        self.bt_contabilizar = tk.Button(self.frame_botoes, text="Contabilizar", command=self.contabilizar)
        self.bt_contabilizar.pack(side=tk.RIGHT)

        self.carregar_usuarios()

    def carregar_usuarios(self):
        if os.path.exists("usuarios.json"):
            with open("usuarios.json", "r") as file:
                self.usuarios = json.load(file)
            self.combo_usuarios["values"] = list(self.usuarios.keys())
        else:
            self.usuarios = {}

    def cadastrar_usuario(self):
        nome = self.entry_nome.get().strip()
        if not nome:
            msgbox.showerror("Erro", "Por favor, insira um nome.")
            return

        if nome in self.usuarios:
            msgbox.showerror("Erro", "Nome já cadastrado.")
            return

        self.usuarios[nome] = {
            "bolsas": {bolsa: {operacao: var.get() for operacao, var in self.variaveis_bolsas[bolsa].items()} for bolsa in self.bolsas},
            "deducoes": float(self.entry_deducoes.get() or "0"),
            "acoes": []
        }

        with open("usuarios.json", "w") as file:
            json.dump(self.usuarios, file)

        self.combo_usuarios["values"] = list(self.usuarios.keys())
        msgbox.showinfo("Sucesso", "Usuário cadastrado com sucesso.")

    def selecionar_usuario(self, event=None):
        nome = self.cb_usuarios.get()
        usuario = self.usuarios[nome]

        self.entry_nome.delete(0, tk.END)
        self.entry_nome.insert(tk.END, nome)

        for bolsa in self.bolsas:
            for operacao, variavel in self.variaveis_bolsas[bolsa].items():
                variavel.set(usuario["bolsas"][bolsa][operacao])

        self.entry_deducoes.delete(0, tk.END)
        self.entry_deducoes.insert(tk.END, str(usuario["deducoes"]))

    def contabilizar(self):
        nome = self.cb_usuarios.get()
        if not nome:
            msgbox.showerror("Erro", "Por favor, selecione um usuário.")
            return

        usuario = self.usuarios[nome]

        # Adicione aqui a lógica para adicionar ações, calcular o lucro, impostos e salvar no perfil do usuário.

        msgbox.showinfo("Contabilização", f"Olá {nome}!\nAgora é {datetime.now().strftime('%H:%M:%S')}")

